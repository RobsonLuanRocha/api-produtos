// Importando o Express (framework para criar APIs) e Joi (validaÃ§Ã£o)
const express = require('express');
const Joi = require('joi');

// Criando a aplicaÃ§Ã£o
const app = express();
const PORT = 3000;

// Middleware que transforma JSON do corpo das requisiÃ§Ãµes em objeto JS
app.use(express.json());

// Banco de dados "falso" em memÃ³ria
let produtos = [];
let proximoId = 1;

// Schema de validaÃ§Ã£o para criaÃ§Ã£o e ediÃ§Ã£o de produto
const produtoSchema = Joi.object({
  nome: Joi.string().min(3).required().messages({
    'string.empty': 'Nome Ã© obrigatÃ³rio.',
    'string.min': 'Nome deve ter no mÃ­nimo 3 caracteres.'
  }),
  preco: Joi.number().positive().required().messages({
    'number.base': 'PreÃ§o deve ser um nÃºmero.',
    'number.positive': 'PreÃ§o deve ser positivo.',
    'any.required': 'PreÃ§o Ã© obrigatÃ³rio.'
  })
});

//////////////////////////
// ROTAS DA API
//////////////////////////

// ðŸŸ¢ GET /produtos - Listar todos os produtos
app.get('/produtos', (req, res) => {
  res.json(produtos);
});

// ðŸŸ¡ POST /produtos - Criar novo produto com validaÃ§Ã£o
app.post('/produtos', (req, res) => {
  const { error, value } = produtoSchema.validate(req.body, { abortEarly: false });

  if (error) {
    return res.status(400).json({ erros: error.details.map(e => e.message) });
  }

  const novoProduto = { id: proximoId++, ...value };
  produtos.push(novoProduto);
  res.status(201).json(novoProduto);
});

// ðŸŸ  PUT /produtos/:id - Editar um produto existente
app.put('/produtos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = produtos.findIndex(p => p.id === id);

  if (index === -1) {
    return res.status(404).json({ erro: 'Produto nÃ£o encontrado.' });
  }

  const { error, value } = produtoSchema.validate(req.body, { abortEarly: false });

  if (error) {
    return res.status(400).json({ erros: error.details.map(e => e.message) });
  }

  produtos[index] = { id, ...value };
  res.json(produtos[index]);
});

// ðŸ”´ DELETE /produtos/:id - Excluir um produto
app.delete('/produtos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = produtos.findIndex(p => p.id === id);

  if (index === -1) {
    return res.status(404).json({ erro: 'Produto nÃ£o encontrado.' });
  }

  produtos.splice(index, 1);
  res.status(204).send(); // Sucesso, mas sem conteÃºdo
});

// Inicia o servidor
app.listen(PORT, () => {
  console.log(`âœ… API rodando em http://localhost:${PORT}`);
});


